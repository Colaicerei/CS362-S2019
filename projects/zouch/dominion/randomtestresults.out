----------------Random Test: Function SmithyEffect()----------------

Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 212 cards now, previously 216.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 108 cards now, previously 112.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 196 cards now, previously 200.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 330 cards now, previously 334.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 55 cards now, previously 59.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 155 cards now, previously 159.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 234 cards now, previously 238.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 6 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 2.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 40 cards now, previously 44.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 416 cards now, previously 420.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 23 cards now, previously 27.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 41 cards now, previously 45.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 475 cards now, previously 479.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 495 cards now, previously 499.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 133 cards now, previously 137.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 95 cards now, previously 99.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 97 cards now, previously 101.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 37 cards now, previously 41.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 26 cards now, previously 30.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 363 cards now, previously 367.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 238 cards now, previously 242.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 222 cards now, previously 226.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 30 cards now, previously 34.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 131 cards now, previously 135.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 234 cards now, previously 238.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 445 cards now, previously 449.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 495 cards now, previously 499.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 131 cards now, previously 135.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 207 cards now, previously 211.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 355 cards now, previously 359.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 379 cards now, previously 383.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 86 cards now, previously 90.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 99 cards now, previously 103.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 37 cards now, previously 41.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 412 cards now, previously 416.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 471 cards now, previously 475.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 288 cards now, previously 292.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 493 cards now, previously 497.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 232 cards now, previously 236.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 201 cards now, previously 205.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 467 cards now, previously 471.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 463 cards now, previously 467.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 131 cards now, previously 135.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 306 cards now, previously 310.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 452 cards now, previously 456.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 49 cards now, previously 53.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 275 cards now, previously 279.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 24 cards now, previously 28.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 445 cards now, previously 449.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 416 cards now, previously 420.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 58 cards now, previously 62.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 480 cards now, previously 484.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 101 cards now, previously 105.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 227 cards now, previously 231.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 253 cards now, previously 257.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 419 cards now, previously 423.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 103 cards now, previously 107.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 102 cards now, previously 106.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 123 cards now, previously 127.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 237 cards now, previously 241.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 29 cards now, previously 33.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 238 cards now, previously 242.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 400 cards now, previously 404.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 482 cards now, previously 486.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 28 cards now, previously 32.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 207 cards now, previously 211.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 436 cards now, previously 440.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 254 cards now, previously 258.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 14 cards now, previously 18.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 91 cards now, previously 95.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 264 cards now, previously 268.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 116 cards now, previously 120.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 45 cards now, previously 49.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 201 cards now, previously 205.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 461 cards now, previously 465.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 93 cards now, previously 97.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 182 cards now, previously 186.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 411 cards now, previously 415.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 435 cards now, previously 439.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 23 cards now, previously 27.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 464 cards now, previously 468.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 226 cards now, previously 230.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 380 cards now, previously 384.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 226 cards now, previously 230.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 107 cards now, previously 111.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 96 cards now, previously 100.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 107 cards now, previously 111.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 230 cards now, previously 234.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 289 cards now, previously 293.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 120 cards now, previously 124.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 92 cards now, previously 96.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 380 cards now, previously 384.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 317 cards now, previously 321.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 402 cards now, previously 406.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 41 cards now, previously 45.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 113 cards now, previously 117.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 467 cards now, previously 471.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 238 cards now, previously 242.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 116 cards now, previously 120.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 112 cards now, previously 116.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 476 cards now, previously 480.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 332 cards now, previously 336.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 401 cards now, previously 405.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 355 cards now, previously 359.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 128 cards now, previously 132.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 145 cards now, previously 149.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 94 cards now, previously 98.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 212 cards now, previously 216.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 79 cards now, previously 83.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 368 cards now, previously 372.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 333 cards now, previously 337.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 42 cards now, previously 46.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 228 cards now, previously 232.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 293 cards now, previously 297.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 350 cards now, previously 354.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 491 cards now, previously 495.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 396 cards now, previously 400.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 391 cards now, previously 395.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 468 cards now, previously 472.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 275 cards now, previously 279.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 204 cards now, previously 208.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 461 cards now, previously 465.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 410 cards now, previously 414.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 316 cards now, previously 320.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 172 cards now, previously 176.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 284 cards now, previously 288.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 255 cards now, previously 259.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 47 cards now, previously 51.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 456 cards now, previously 460.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 435 cards now, previously 439.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 469 cards now, previously 473.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 314 cards now, previously 318.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 451 cards now, previously 455.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 11 cards now, previously 15.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 489 cards now, previously 493.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 491 cards now, previously 495.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 255 cards now, previously 259.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 475 cards now, previously 479.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 163 cards now, previously 167.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 26 cards now, previously 30.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 108 cards now, previously 112.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 90 cards now, previously 94.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 271 cards now, previously 275.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 139 cards now, previously 143.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 489 cards now, previously 493.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 367 cards now, previously 371.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 12 cards now, previously 16.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 319 cards now, previously 323.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 117 cards now, previously 121.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 148 cards now, previously 152.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 419 cards now, previously 423.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 30 cards now, previously 34.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 407 cards now, previously 411.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 101 cards now, previously 105.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 299 cards now, previously 303.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 197 cards now, previously 201.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 373 cards now, previously 377.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 389 cards now, previously 393.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 16 cards now, previously 20.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 50 cards now, previously 54.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 216 cards now, previously 220.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 201 cards now, previously 205.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 81 cards now, previously 85.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 345 cards now, previously 349.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 41 cards now, previously 45.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 468 cards now, previously 472.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 368 cards now, previously 372.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 200 cards now, previously 204.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 126 cards now, previously 130.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 458 cards now, previously 462.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 296 cards now, previously 300.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 65 cards now, previously 69.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 456 cards now, previously 460.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 495 cards now, previously 499.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 105 cards now, previously 109.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 37 cards now, previously 41.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 281 cards now, previously 285.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 390 cards now, previously 394.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 69 cards now, previously 73.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 399 cards now, previously 403.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 222 cards now, previously 226.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 326 cards now, previously 330.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 124 cards now, previously 128.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 488 cards now, previously 492.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 381 cards now, previously 385.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 435 cards now, previously 439.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 443 cards now, previously 447.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 59 cards now, previously 63.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 480 cards now, previously 484.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 2 cards now, previously 6.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 455 cards now, previously 459.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 453 cards now, previously 457.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 456 cards now, previously 460.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 156 cards now, previously 160.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 385 cards now, previously 389.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 489 cards now, previously 493.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 60 cards now, previously 64.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 210 cards now, previously 214.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 283 cards now, previously 287.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 222 cards now, previously 226.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 309 cards now, previously 313.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 295 cards now, previously 299.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 339 cards now, previously 343.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 36 cards now, previously 40.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 219 cards now, previously 223.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 319 cards now, previously 323.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 83 cards now, previously 87.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 401 cards now, previously 405.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 106 cards now, previously 110.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 408 cards now, previously 412.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 362 cards now, previously 366.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 296 cards now, previously 300.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 296 cards now, previously 300.
Fail. Two cards should be grain in total. The player has 6 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 2.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 222 cards now, previously 226.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 101 cards now, previously 105.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 483 cards now, previously 487.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 51 cards now, previously 55.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 256 cards now, previously 260.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 159 cards now, previously 163.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 448 cards now, previously 452.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 255 cards now, previously 259.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 401 cards now, previously 405.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 345 cards now, previously 349.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 116 cards now, previously 120.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 191 cards now, previously 195.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 217 cards now, previously 221.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 452 cards now, previously 456.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 313 cards now, previously 317.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 271 cards now, previously 275.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 273 cards now, previously 277.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 377 cards now, previously 381.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 400 cards now, previously 404.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 132 cards now, previously 136.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 158 cards now, previously 162.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 298 cards now, previously 302.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 195 cards now, previously 199.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 160 cards now, previously 164.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 105 cards now, previously 109.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 325 cards now, previously 329.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 187 cards now, previously 191.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 204 cards now, previously 208.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 176 cards now, previously 180.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 94 cards now, previously 98.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 362 cards now, previously 366.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 436 cards now, previously 440.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 446 cards now, previously 450.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 414 cards now, previously 418.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 46 cards now, previously 50.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 251 cards now, previously 255.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 370 cards now, previously 374.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 436 cards now, previously 440.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 423 cards now, previously 427.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 377 cards now, previously 381.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 416 cards now, previously 420.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 256 cards now, previously 260.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 458 cards now, previously 462.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 293 cards now, previously 297.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 91 cards now, previously 95.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 137 cards now, previously 141.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 412 cards now, previously 416.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 482 cards now, previously 486.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 483 cards now, previously 487.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 221 cards now, previously 225.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 382 cards now, previously 386.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 253 cards now, previously 257.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 15 cards now, previously 19.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 446 cards now, previously 450.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 102 cards now, previously 106.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 147 cards now, previously 151.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 69 cards now, previously 73.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 43 cards now, previously 47.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 109 cards now, previously 113.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 295 cards now, previously 299.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 308 cards now, previously 312.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 293 cards now, previously 297.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 64 cards now, previously 68.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 288 cards now, previously 292.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 45 cards now, previously 49.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 6 cards now, previously 10.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 470 cards now, previously 474.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 95 cards now, previously 99.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 272 cards now, previously 276.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 51 cards now, previously 55.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 364 cards now, previously 368.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 24 cards now, previously 28.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 110 cards now, previously 114.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 474 cards now, previously 478.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 408 cards now, previously 412.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 355 cards now, previously 359.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 315 cards now, previously 319.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 168 cards now, previously 172.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 58 cards now, previously 62.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 173 cards now, previously 177.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 283 cards now, previously 287.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 276 cards now, previously 280.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 326 cards now, previously 330.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 13 cards now, previously 17.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 487 cards now, previously 491.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 415 cards now, previously 419.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 430 cards now, previously 434.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 381 cards now, previously 385.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 137 cards now, previously 141.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 407 cards now, previously 411.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 133 cards now, previously 137.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 66 cards now, previously 70.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 152 cards now, previously 156.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 274 cards now, previously 278.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 440 cards now, previously 444.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 28 cards now, previously 32.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 273 cards now, previously 277.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 271 cards now, previously 275.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 146 cards now, previously 150.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 488 cards now, previously 492.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 99 cards now, previously 103.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 481 cards now, previously 485.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 162 cards now, previously 166.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 59 cards now, previously 63.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 131 cards now, previously 135.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 304 cards now, previously 308.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 273 cards now, previously 277.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 156 cards now, previously 160.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 461 cards now, previously 465.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 357 cards now, previously 361.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 107 cards now, previously 111.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 168 cards now, previously 172.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 289 cards now, previously 293.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 330 cards now, previously 334.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 374 cards now, previously 378.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 164 cards now, previously 168.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 441 cards now, previously 445.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 141 cards now, previously 145.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 101 cards now, previously 105.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 217 cards now, previously 221.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 339 cards now, previously 343.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 233 cards now, previously 237.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 232 cards now, previously 236.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 316 cards now, previously 320.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 403 cards now, previously 407.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 432 cards now, previously 436.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 230 cards now, previously 234.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 421 cards now, previously 425.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 15 cards now, previously 19.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 261 cards now, previously 265.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 362 cards now, previously 366.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 16 cards now, previously 20.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 136 cards now, previously 140.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 463 cards now, previously 467.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 293 cards now, previously 297.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 15 cards now, previously 19.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 221 cards now, previously 225.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 275 cards now, previously 279.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 448 cards now, previously 452.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 72 cards now, previously 76.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 287 cards now, previously 291.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 63 cards now, previously 67.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 146 cards now, previously 150.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 50 cards now, previously 54.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 138 cards now, previously 142.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 468 cards now, previously 472.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 214 cards now, previously 218.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 396 cards now, previously 400.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 24 cards now, previously 28.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 424 cards now, previously 428.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 164 cards now, previously 168.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 282 cards now, previously 286.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 263 cards now, previously 267.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 309 cards now, previously 313.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 370 cards now, previously 374.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 330 cards now, previously 334.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 135 cards now, previously 139.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 319 cards now, previously 323.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 281 cards now, previously 285.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 325 cards now, previously 329.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 468 cards now, previously 472.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 308 cards now, previously 312.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 157 cards now, previously 161.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 255 cards now, previously 259.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 15 cards now, previously 19.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 158 cards now, previously 162.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 29 cards now, previously 33.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 12 cards now, previously 16.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 406 cards now, previously 410.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 227 cards now, previously 231.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 462 cards now, previously 466.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 165 cards now, previously 169.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 58 cards now, previously 62.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 316 cards now, previously 320.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 47 cards now, previously 51.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 84 cards now, previously 88.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 26 cards now, previously 30.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 194 cards now, previously 198.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 119 cards now, previously 123.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 329 cards now, previously 333.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 43 cards now, previously 47.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 2 cards now, previously 6.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 355 cards now, previously 359.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 337 cards now, previously 341.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 306 cards now, previously 310.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 162 cards now, previously 166.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 221 cards now, previously 225.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 107 cards now, previously 111.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 209 cards now, previously 213.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 487 cards now, previously 491.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 226 cards now, previously 230.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 251 cards now, previously 255.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 239 cards now, previously 243.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 60 cards now, previously 64.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 473 cards now, previously 477.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 291 cards now, previously 295.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 343 cards now, previously 347.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 469 cards now, previously 473.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 44 cards now, previously 48.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 274 cards now, previously 278.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 448 cards now, previously 452.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 316 cards now, previously 320.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 454 cards now, previously 458.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 492 cards now, previously 496.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 330 cards now, previously 334.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 83 cards now, previously 87.
Fail. Two cards should be grain in total. The player has 5 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 1.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 158 cards now, previously 162.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 30 cards now, previously 34.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 314 cards now, previously 318.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 46 cards now, previously 50.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 121 cards now, previously 125.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 307 cards now, previously 311.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 91 cards now, previously 95.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 344 cards now, previously 348.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 4.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 223 cards now, previously 227.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 172 cards now, previously 176.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 273 cards now, previously 277.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 105 cards now, previously 109.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 79 cards now, previously 83.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 210 cards now, previously 214.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 37 cards now, previously 41.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 246 cards now, previously 250.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 278 cards now, previously 282.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 124 cards now, previously 128.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 66 cards now, previously 70.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 121 cards now, previously 125.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 83 cards now, previously 87.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 136 cards now, previously 140.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 377 cards now, previously 381.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 256 cards now, previously 260.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 360 cards now, previously 364.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 412 cards now, previously 416.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 91 cards now, previously 95.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 287 cards now, previously 291.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 207 cards now, previously 211.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 315 cards now, previously 319.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 131 cards now, previously 135.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 436 cards now, previously 440.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 344 cards now, previously 348.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 312 cards now, previously 316.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 451 cards now, previously 455.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 250 cards now, previously 254.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 238 cards now, previously 242.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 426 cards now, previously 430.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 304 cards now, previously 308.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 123 cards now, previously 127.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 370 cards now, previously 374.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 483 cards now, previously 487.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 165 cards now, previously 169.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 12 cards now, previously 16.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 108 cards now, previously 112.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 182 cards now, previously 186.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 237 cards now, previously 241.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 161 cards now, previously 165.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 25 cards now, previously 29.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 270 cards now, previously 274.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 433 cards now, previously 437.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 445 cards now, previously 449.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 5 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 1.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 367 cards now, previously 371.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 468 cards now, previously 472.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 492 cards now, previously 496.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 3 cards now, previously 7.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 463 cards now, previously 467.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 75 cards now, previously 79.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 200 cards now, previously 204.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 253 cards now, previously 257.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 141 cards now, previously 145.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 63 cards now, previously 67.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 58 cards now, previously 62.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 340 cards now, previously 344.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 438 cards now, previously 442.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 30 cards now, previously 34.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 95 cards now, previously 99.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 426 cards now, previously 430.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 326 cards now, previously 330.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 311 cards now, previously 315.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 194 cards now, previously 198.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 436 cards now, previously 440.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 406 cards now, previously 410.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 317 cards now, previously 321.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 96 cards now, previously 100.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 146 cards now, previously 150.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 147 cards now, previously 151.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 278 cards now, previously 282.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 284 cards now, previously 288.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 419 cards now, previously 423.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 94 cards now, previously 98.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 153 cards now, previously 157.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 164 cards now, previously 168.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 184 cards now, previously 188.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 345 cards now, previously 349.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 335 cards now, previously 339.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 427 cards now, previously 431.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 38 cards now, previously 42.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 153 cards now, previously 157.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 266 cards now, previously 270.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 403 cards now, previously 407.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 25 cards now, previously 29.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 182 cards now, previously 186.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 362 cards now, previously 366.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 421 cards now, previously 425.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 364 cards now, previously 368.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 9 cards now, previously 13.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 98 cards now, previously 102.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 66 cards now, previously 70.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 173 cards now, previously 177.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 312 cards now, previously 316.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 11 cards now, previously 15.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 86 cards now, previously 90.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 209 cards now, previously 213.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 353 cards now, previously 357.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 452 cards now, previously 456.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 261 cards now, previously 265.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 197 cards now, previously 201.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 144 cards now, previously 148.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 121 cards now, previously 125.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 454 cards now, previously 458.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 144 cards now, previously 148.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 408 cards now, previously 412.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 360 cards now, previously 364.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 228 cards now, previously 232.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 245 cards now, previously 249.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 64 cards now, previously 68.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 341 cards now, previously 345.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 470 cards now, previously 474.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 453 cards now, previously 457.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 425 cards now, previously 429.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 86 cards now, previously 90.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 382 cards now, previously 386.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 284 cards now, previously 288.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 430 cards now, previously 434.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 196 cards now, previously 200.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 22 cards now, previously 26.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 16 cards now, previously 20.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 213 cards now, previously 217.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 308 cards now, previously 312.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 385 cards now, previously 389.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 269 cards now, previously 273.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 6 cards now, previously 10.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 198 cards now, previously 202.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 440 cards now, previously 444.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 435 cards now, previously 439.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 42 cards now, previously 46.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 352 cards now, previously 356.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 426 cards now, previously 430.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 51 cards now, previously 55.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 73 cards now, previously 77.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 63 cards now, previously 67.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 13 cards now, previously 17.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 132 cards now, previously 136.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 274 cards now, previously 278.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 419 cards now, previously 423.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 396 cards now, previously 400.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 391 cards now, previously 395.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 473 cards now, previously 477.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 386 cards now, previously 390.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 271 cards now, previously 275.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 289 cards now, previously 293.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 68 cards now, previously 72.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 45 cards now, previously 49.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 461 cards now, previously 465.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 195 cards now, previously 199.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 274 cards now, previously 278.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 379 cards now, previously 383.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 386 cards now, previously 390.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 212 cards now, previously 216.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 482 cards now, previously 486.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 381 cards now, previously 385.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 351 cards now, previously 355.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:19.18% of 417
Taken at least once:16.31% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 45480 returned 100% blocks executed 83%
    45480:    8:int compare(const void* a, const void* b) {
    45480:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    45480:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    12128:   12:    return -1;
    33352:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   74:    {
      316:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      684:   77:  else if (numPlayers == 3)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
      336:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      348:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   88:    {
      316:   89:      state->supplyCount[estate] = 8;
      316:   90:      state->supplyCount[duchy] = 8;
      316:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      684:   95:      state->supplyCount[estate] = 12;
      684:   96:      state->supplyCount[duchy] = 12;
      684:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      632:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1368:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4032:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     3032:  140:      state->deckCount[i] = 0;
    12128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     9096:  143:	  state->deck[i][j] = estate;
     9096:  144:	  state->deckCount[i]++;
        -:  145:	}
    24256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    21224:  148:	  state->deck[i][j] = copper;
    21224:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4032:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     3032:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4032:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3032:  166:      state->handCount[i] = 0;
     3032:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3048 returned 100% blocks executed 100%
     3048:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3048:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3048:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       16:  210:    return -1;
     3032:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    36384:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    30320:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    30320:  216:    newDeck[newDeckPos] = state->deck[player][card];
    30320:  217:    newDeckPos++;
   105772:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    75452:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    30320:  221:    state->deckCount[player]--;
        -:  222:  }
    33352:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    30320:  224:    state->deck[player][i] = newDeck[i];
    30320:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3032:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 9000 returned 100% blocks executed 85%
     9000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     9000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       16:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       16:  538:    state->deckCount[player] = state->discardCount[player];
       16:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       16:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       16:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       16:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       16:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       16:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8984:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8984:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8984:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8984:  576:    state->deckCount[player]--;
     8984:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8984:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 1000 returned 100% blocks executed 100%
     1000:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
     5000:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  734:     {
     4000:  735:		 drawCard(currentPlayer, state);		 
call    0 returned 100%
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
     1000:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 1000 returned 100% blocks executed 78%
     1000: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
     1000: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
     1000: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
     1000: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
     1000: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
     1000: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
     1000: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
     1000: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
     1000: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
     1000: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function VillageEffect() ----------

Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:18.71% of 417
Taken at least once:15.83% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44670 returned 100% blocks executed 83%
    44670:    8:int compare(const void* a, const void* b) {
    44670:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    44670:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11912:   12:    return -1;
    32758:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      346:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      654:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      330:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      324:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      346:   89:      state->supplyCount[estate] = 8;
      346:   90:      state->supplyCount[duchy] = 8;
      346:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      654:   95:      state->supplyCount[estate] = 12;
      654:   96:      state->supplyCount[duchy] = 12;
      654:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
      692:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1308:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3978:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2978:  140:      state->deckCount[i] = 0;
    11912:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8934:  143:	  state->deck[i][j] = estate;
     8934:  144:	  state->deckCount[i]++;
        -:  145:	}
    23824:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20846:  148:	  state->deck[i][j] = copper;
    20846:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3978:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2978:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3978:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2978:  166:      state->handCount[i] = 0;
     2978:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2984 returned 100% blocks executed 100%
     2984:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2984:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2984:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        6:  210:    return -1;
     2978:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35736:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29780:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    29780:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29780:  217:    newDeckPos++;
   103906:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    74126:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29780:  221:    state->deckCount[player]--;
        -:  222:  }
    32758:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29780:  224:    state->deck[player][i] = newDeck[i];
    29780:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2978:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6000 returned 100% blocks executed 85%
     6000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        6:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        6:  538:    state->deckCount[player] = state->discardCount[player];
        6:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        6:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        6:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        6:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        6:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        6:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5994:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5994:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5994:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5994:  576:    state->deckCount[player]--;
     5994:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5994:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 1000 returned 100% blocks executed 100%
     1000:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
     1000:  745:     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  746:
        -:  747:     //+2 Actions
     1000:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
     1000:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 1000 returned 100% blocks executed 78%
     1000: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
     1000: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
     1000: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
     1000: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
     1000: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
     1000: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
     1000: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
     1000: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
     1000: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
     1000: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function AdventurerEffect() ----------

Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 0 less cards drawn should be discarded. There are 3 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 4 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 1 less cards drawn should be discarded. There are 1 discarded cards but 1 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 3 discarded cards but 2 drawns.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:20.14% of 417
Taken at least once:17.51% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44730 returned 100% blocks executed 83%
    44730:    8:int compare(const void* a, const void* b) {
    44730:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    44730:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11928:   12:    return -1;
    32802:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
      336:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      664:   77:  else if (numPlayers == 3)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   78:    {
      346:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      318:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
      336:   89:      state->supplyCount[estate] = 8;
      336:   90:      state->supplyCount[duchy] = 8;
      336:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      664:   95:      state->supplyCount[estate] = 12;
      664:   96:      state->supplyCount[duchy] = 12;
      664:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      672:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1328:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3982:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2982:  140:      state->deckCount[i] = 0;
    11928:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8946:  143:	  state->deck[i][j] = estate;
     8946:  144:	  state->deckCount[i]++;
        -:  145:	}
    23856:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20874:  148:	  state->deck[i][j] = copper;
    20874:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3982:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2982:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3982:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2982:  166:      state->handCount[i] = 0;
     2982:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3018 returned 100% blocks executed 100%
     3018:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3018:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3018:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       36:  210:    return -1;
     2982:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35784:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29820:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    29820:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29820:  217:    newDeckPos++;
   104052:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    74232:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29820:  221:    state->deckCount[player]--;
        -:  222:  }
    32802:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29820:  224:    state->deck[player][i] = newDeck[i];
    29820:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2982:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 9030 returned 100% blocks executed 85%
     9030:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     9030:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       18:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       18:  538:    state->deckCount[player] = state->discardCount[player];
       18:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       18:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       18:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       18:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       18:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       18:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     9012:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     9012:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     9012:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9012:  576:    state->deckCount[player]--;
     9012:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     9012:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 1000 returned 100% blocks executed 100%
     1000:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
     1000:  648:     int z = 0;
     6030:  649:     while (drawntreasure < 2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     4030:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       18:  651:               shuffle(currentPlayer, state);
call    0 returned 100%
        -:  652:          }
     4030:  653:          drawCard(currentPlayer, state);
call    0 returned 100%
     4030:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
     4030:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2000:  656:               drawntreasure++;
        -:  657:          else {
     2030:  658:               temphand[z] = cardDrawn;
     2030:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2030:  660:               z++;
        -:  661:          }
        -:  662:     }
     5030:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3030:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
     3030:  665:          z = z - 1;
        -:  666:     }
     1000:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
----------------Random Test: Function SmithyEffect()----------------

Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 335 cards now, previously 339.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 245 cards now, previously 249.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 15 cards now, previously 19.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 108 cards now, previously 112.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 454 cards now, previously 458.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 284 cards now, previously 288.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 492 cards now, previously 496.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 311 cards now, previously 315.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 368 cards now, previously 372.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 135 cards now, previously 139.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 321 cards now, previously 325.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 432 cards now, previously 436.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 180 cards now, previously 184.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 90 cards now, previously 94.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 319 cards now, previously 323.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 11 cards now, previously 15.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 8 cards now, previously 12.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 5 cards now, previously 9.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 263 cards now, previously 267.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 227 cards now, previously 231.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 141 cards now, previously 145.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 234 cards now, previously 238.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 50 cards now, previously 54.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 271 cards now, previously 275.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 232 cards now, previously 236.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 228 cards now, previously 232.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 254 cards now, previously 258.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 96 cards now, previously 100.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 493 cards now, previously 497.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 245 cards now, previously 249.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 473 cards now, previously 477.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 144 cards now, previously 148.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 495 cards now, previously 499.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 493 cards now, previously 497.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 50 cards now, previously 54.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 49 cards now, previously 53.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 241 cards now, previously 245.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 178 cards now, previously 182.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 321 cards now, previously 325.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 159 cards now, previously 163.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 81 cards now, previously 85.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 312 cards now, previously 316.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 316 cards now, previously 320.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 69 cards now, previously 73.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 216 cards now, previously 220.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 365 cards now, previously 369.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 303 cards now, previously 307.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 262 cards now, previously 266.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 62 cards now, previously 66.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 440 cards now, previously 444.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 488 cards now, previously 492.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 207 cards now, previously 211.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 102 cards now, previously 106.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 325 cards now, previously 329.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 50 cards now, previously 54.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 270 cards now, previously 274.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 137 cards now, previously 141.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 102 cards now, previously 106.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 298 cards now, previously 302.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 332 cards now, previously 336.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 224 cards now, previously 228.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 455 cards now, previously 459.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 273 cards now, previously 277.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 387 cards now, previously 391.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 185 cards now, previously 189.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 182 cards now, previously 186.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 20 cards now, previously 24.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 82 cards now, previously 86.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 219 cards now, previously 223.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 308 cards now, previously 312.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 335 cards now, previously 339.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 88 cards now, previously 92.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 117 cards now, previously 121.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 360 cards now, previously 364.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 104 cards now, previously 108.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 95 cards now, previously 99.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 299 cards now, previously 303.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 294 cards now, previously 298.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 425 cards now, previously 429.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 352 cards now, previously 356.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 93 cards now, previously 97.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 407 cards now, previously 411.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 22 cards now, previously 26.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 23 cards now, previously 27.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 493 cards now, previously 497.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 200 cards now, previously 204.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 462 cards now, previously 466.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 237 cards now, previously 241.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 14 cards now, previously 18.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 345 cards now, previously 349.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 156 cards now, previously 160.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 180 cards now, previously 184.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 270 cards now, previously 274.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 233 cards now, previously 237.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 120 cards now, previously 124.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 2 cards now, previously 6.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 476 cards now, previously 480.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 13 cards now, previously 17.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 108 cards now, previously 112.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 407 cards now, previously 411.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 413 cards now, previously 417.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 440 cards now, previously 444.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 99 cards now, previously 103.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 128 cards now, previously 132.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 338 cards now, previously 342.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 227 cards now, previously 231.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 47 cards now, previously 51.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 174 cards now, previously 178.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 17 cards now, previously 21.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 438 cards now, previously 442.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 398 cards now, previously 402.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 380 cards now, previously 384.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 432 cards now, previously 436.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 180 cards now, previously 184.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 402 cards now, previously 406.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 237 cards now, previously 241.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 151 cards now, previously 155.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 375 cards now, previously 379.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 141 cards now, previously 145.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 104 cards now, previously 108.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 6 cards now, previously 10.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 410 cards now, previously 414.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 375 cards now, previously 379.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 68 cards now, previously 72.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 329 cards now, previously 333.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 224 cards now, previously 228.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 240 cards now, previously 244.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 55 cards now, previously 59.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 75 cards now, previously 79.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 209 cards now, previously 213.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 176 cards now, previously 180.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 291 cards now, previously 295.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 72 cards now, previously 76.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 105 cards now, previously 109.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 157 cards now, previously 161.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 321 cards now, previously 325.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 121 cards now, previously 125.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 13 cards now, previously 17.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 306 cards now, previously 310.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 453 cards now, previously 457.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 163 cards now, previously 167.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 72 cards now, previously 76.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 279 cards now, previously 283.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 171 cards now, previously 175.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 75 cards now, previously 79.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 1 cards now, previously 5.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 318 cards now, previously 322.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 339 cards now, previously 343.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 163 cards now, previously 167.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 437 cards now, previously 441.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 396 cards now, previously 400.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 332 cards now, previously 336.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 243 cards now, previously 247.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 409 cards now, previously 413.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 472 cards now, previously 476.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 99 cards now, previously 103.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 4 cards now, previously 8.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 378 cards now, previously 382.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 281 cards now, previously 285.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 421 cards now, previously 425.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 14 cards now, previously 18.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 332 cards now, previously 336.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 194 cards now, previously 198.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 394 cards now, previously 398.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 260 cards now, previously 264.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 304 cards now, previously 308.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 202 cards now, previously 206.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 3 cards now, previously 7.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 17 cards now, previously 21.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 290 cards now, previously 294.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 270 cards now, previously 274.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 237 cards now, previously 241.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 320 cards now, previously 324.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 159 cards now, previously 163.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 481 cards now, previously 485.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 126 cards now, previously 130.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 79 cards now, previously 83.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 54 cards now, previously 58.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 246 cards now, previously 250.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 269 cards now, previously 273.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 272 cards now, previously 276.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 284 cards now, previously 288.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 196 cards now, previously 200.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 215 cards now, previously 219.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 40 cards now, previously 44.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 424 cards now, previously 428.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 185 cards now, previously 189.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 37 cards now, previously 41.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 312 cards now, previously 316.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 66 cards now, previously 70.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 401 cards now, previously 405.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 65 cards now, previously 69.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 92 cards now, previously 96.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 65 cards now, previously 69.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 311 cards now, previously 315.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 210 cards now, previously 214.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 491 cards now, previously 495.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 246 cards now, previously 250.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 317 cards now, previously 321.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 380 cards now, previously 384.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 373 cards now, previously 377.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 65 cards now, previously 69.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 246 cards now, previously 250.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 168 cards now, previously 172.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 337 cards now, previously 341.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 262 cards now, previously 266.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 296 cards now, previously 300.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 285 cards now, previously 289.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 180 cards now, previously 184.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 321 cards now, previously 325.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 387 cards now, previously 391.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 317 cards now, previously 321.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 233 cards now, previously 237.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 481 cards now, previously 485.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 354 cards now, previously 358.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 394 cards now, previously 398.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 464 cards now, previously 468.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 246 cards now, previously 250.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 279 cards now, previously 283.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 83 cards now, previously 87.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 101 cards now, previously 105.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 92 cards now, previously 96.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 462 cards now, previously 466.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 469 cards now, previously 473.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 12 cards now, previously 16.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 330 cards now, previously 334.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 65 cards now, previously 69.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 219 cards now, previously 223.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 168 cards now, previously 172.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 304 cards now, previously 308.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 479 cards now, previously 483.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 88 cards now, previously 92.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 370 cards now, previously 374.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 31 cards now, previously 35.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 230 cards now, previously 234.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 171 cards now, previously 175.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 290 cards now, previously 294.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 214 cards now, previously 218.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 382 cards now, previously 386.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 288 cards now, previously 292.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 22 cards now, previously 26.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 353 cards now, previously 357.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 197 cards now, previously 201.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 80 cards now, previously 84.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 462 cards now, previously 466.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 36 cards now, previously 40.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 106 cards now, previously 110.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 344 cards now, previously 348.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 4.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 423 cards now, previously 427.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 416 cards now, previously 420.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 152 cards now, previously 156.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 399 cards now, previously 403.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 278 cards now, previously 282.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 162 cards now, previously 166.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 359 cards now, previously 363.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 77 cards now, previously 81.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 80 cards now, previously 84.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 242 cards now, previously 246.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 443 cards now, previously 447.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 309 cards now, previously 313.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 92 cards now, previously 96.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 30 cards now, previously 34.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 81 cards now, previously 85.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 255 cards now, previously 259.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 266 cards now, previously 270.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 241 cards now, previously 245.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 170 cards now, previously 174.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 324 cards now, previously 328.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 477 cards now, previously 481.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 76 cards now, previously 80.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 375 cards now, previously 379.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 199 cards now, previously 203.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 463 cards now, previously 467.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 157 cards now, previously 161.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 281 cards now, previously 285.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 487 cards now, previously 491.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 162 cards now, previously 166.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 244 cards now, previously 248.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 34 cards now, previously 38.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 222 cards now, previously 226.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 353 cards now, previously 357.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 119 cards now, previously 123.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 46 cards now, previously 50.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 413 cards now, previously 417.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 110 cards now, previously 114.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 183 cards now, previously 187.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 232 cards now, previously 236.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 127 cards now, previously 131.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 4 cards now, previously 8.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 469 cards now, previously 473.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 54 cards now, previously 58.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 55 cards now, previously 59.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 446 cards now, previously 450.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 448 cards now, previously 452.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 104 cards now, previously 108.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 373 cards now, previously 377.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 495 cards now, previously 499.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 28 cards now, previously 32.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 173 cards now, previously 177.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 368 cards now, previously 372.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 352 cards now, previously 356.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 126 cards now, previously 130.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 343 cards now, previously 347.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 480 cards now, previously 484.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 326 cards now, previously 330.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 160 cards now, previously 164.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 307 cards now, previously 311.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 441 cards now, previously 445.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 434 cards now, previously 438.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 160 cards now, previously 164.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 333 cards now, previously 337.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 408 cards now, previously 412.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 340 cards now, previously 344.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 29 cards now, previously 33.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 300 cards now, previously 304.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 426 cards now, previously 430.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 146 cards now, previously 150.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 113 cards now, previously 117.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 167 cards now, previously 171.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 178 cards now, previously 182.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 340 cards now, previously 344.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 63 cards now, previously 67.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 462 cards now, previously 466.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 472 cards now, previously 476.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 488 cards now, previously 492.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 357 cards now, previously 361.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 47 cards now, previously 51.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 382 cards now, previously 386.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 174 cards now, previously 178.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 298 cards now, previously 302.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 22 cards now, previously 26.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 480 cards now, previously 484.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 170 cards now, previously 174.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 129 cards now, previously 133.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 353 cards now, previously 357.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 73 cards now, previously 77.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 63 cards now, previously 67.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 95 cards now, previously 99.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 373 cards now, previously 377.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 34 cards now, previously 38.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 204 cards now, previously 208.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 147 cards now, previously 151.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 183 cards now, previously 187.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 352 cards now, previously 356.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 298 cards now, previously 302.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 61 cards now, previously 65.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 79 cards now, previously 83.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 55 cards now, previously 59.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 18 cards now, previously 22.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 443 cards now, previously 447.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 132 cards now, previously 136.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 75 cards now, previously 79.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 426 cards now, previously 430.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 42 cards now, previously 46.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 234 cards now, previously 238.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 111 cards now, previously 115.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 174 cards now, previously 178.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 320 cards now, previously 324.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 49 cards now, previously 53.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 245 cards now, previously 249.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 446 cards now, previously 450.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 163 cards now, previously 167.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 458 cards now, previously 462.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 306 cards now, previously 310.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 8 cards now, previously 12.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 55 cards now, previously 59.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 324 cards now, previously 328.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 377 cards now, previously 381.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 318 cards now, previously 322.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 323 cards now, previously 327.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 435 cards now, previously 439.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 94 cards now, previously 98.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 144 cards now, previously 148.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 236 cards now, previously 240.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 266 cards now, previously 270.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 137 cards now, previously 141.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 176 cards now, previously 180.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 385 cards now, previously 389.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 337 cards now, previously 341.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 100 cards now, previously 104.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 338 cards now, previously 342.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 117 cards now, previously 121.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 259 cards now, previously 263.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 231 cards now, previously 235.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 347 cards now, previously 351.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 23 cards now, previously 27.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 373 cards now, previously 377.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 252 cards now, previously 256.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 68 cards now, previously 72.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 413 cards now, previously 417.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 389 cards now, previously 393.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 223 cards now, previously 227.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 53 cards now, previously 57.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 7 cards now, previously 11.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 324 cards now, previously 328.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 196 cards now, previously 200.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 434 cards now, previously 438.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 258 cards now, previously 262.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 110 cards now, previously 114.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 455 cards now, previously 459.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 386 cards now, previously 390.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 325 cards now, previously 329.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 133 cards now, previously 137.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 286 cards now, previously 290.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 396 cards now, previously 400.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 400 cards now, previously 404.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 297 cards now, previously 301.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 168 cards now, previously 172.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 213 cards now, previously 217.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 362 cards now, previously 366.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 67 cards now, previously 71.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 221 cards now, previously 225.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 106 cards now, previously 110.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 343 cards now, previously 347.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 155 cards now, previously 159.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 88 cards now, previously 92.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 47 cards now, previously 51.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 346 cards now, previously 350.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 456 cards now, previously 460.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 125 cards now, previously 129.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 353 cards now, previously 357.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 70 cards now, previously 74.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 327 cards now, previously 331.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 283 cards now, previously 287.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 150 cards now, previously 154.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 157 cards now, previously 161.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 226 cards now, previously 230.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 429 cards now, previously 433.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 295 cards now, previously 299.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 10 cards now, previously 14.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 425 cards now, previously 429.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 73 cards now, previously 77.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 417 cards now, previously 421.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 274 cards now, previously 278.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 351 cards now, previously 355.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 256 cards now, previously 260.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 175 cards now, previously 179.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 119 cards now, previously 123.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 266 cards now, previously 270.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 287 cards now, previously 291.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 241 cards now, previously 245.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 214 cards now, previously 218.
Fail. Two cards should be grain in total. The player has 6 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 2.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 340 cards now, previously 344.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 191 cards now, previously 195.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 145 cards now, previously 149.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 200 cards now, previously 204.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 492 cards now, previously 496.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 424 cards now, previously 428.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 219 cards now, previously 223.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 413 cards now, previously 417.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 399 cards now, previously 403.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 452 cards now, previously 456.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 348 cards now, previously 352.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 110 cards now, previously 114.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 423 cards now, previously 427.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 341 cards now, previously 345.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 162 cards now, previously 166.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 303 cards now, previously 307.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 494 cards now, previously 498.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 184 cards now, previously 188.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 444 cards now, previously 448.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 471 cards now, previously 475.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 19 cards now, previously 23.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 247 cards now, previously 251.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 487 cards now, previously 491.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 454 cards now, previously 458.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 21 cards now, previously 25.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 233 cards now, previously 237.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 487 cards now, previously 491.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 376 cards now, previously 380.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 367 cards now, previously 371.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 238 cards now, previously 242.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 365 cards now, previously 369.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 133 cards now, previously 137.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 477 cards now, previously 481.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 227 cards now, previously 231.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 415 cards now, previously 419.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 472 cards now, previously 476.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 406 cards now, previously 410.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 24 cards now, previously 28.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 16 cards now, previously 20.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 452 cards now, previously 456.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 225 cards now, previously 229.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 230 cards now, previously 234.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 87 cards now, previously 91.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 11 cards now, previously 15.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 148 cards now, previously 152.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 75 cards now, previously 79.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 115 cards now, previously 119.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 26 cards now, previously 30.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 159 cards now, previously 163.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 27 cards now, previously 31.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 193 cards now, previously 197.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 181 cards now, previously 185.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 69 cards now, previously 73.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 32 cards now, previously 36.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 148 cards now, previously 152.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 110 cards now, previously 114.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 290 cards now, previously 294.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 140 cards now, previously 144.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 326 cards now, previously 330.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 268 cards now, previously 272.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 135 cards now, previously 139.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 76 cards now, previously 80.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 42 cards now, previously 46.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 341 cards now, previously 345.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 334 cards now, previously 338.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 345 cards now, previously 349.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 386 cards now, previously 390.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 385 cards now, previously 389.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 213 cards now, previously 217.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 365 cards now, previously 369.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 35 cards now, previously 39.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 420 cards now, previously 424.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 461 cards now, previously 465.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 104 cards now, previously 108.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 347 cards now, previously 351.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 109 cards now, previously 113.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 99 cards now, previously 103.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 45 cards now, previously 49.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 424 cards now, previously 428.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 73 cards now, previously 77.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 409 cards now, previously 413.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 342 cards now, previously 346.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 71 cards now, previously 75.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 347 cards now, previously 351.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 97 cards now, previously 101.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 35 cards now, previously 39.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 275 cards now, previously 279.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 356 cards now, previously 360.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 438 cards now, previously 442.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 156 cards now, previously 160.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 415 cards now, previously 419.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 387 cards now, previously 391.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 90 cards now, previously 94.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 343 cards now, previously 347.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 361 cards now, previously 365.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 3 cards now, previously 7.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 62 cards now, previously 66.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 144 cards now, previously 148.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 464 cards now, previously 468.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 81 cards now, previously 85.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 160 cards now, previously 164.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 450 cards now, previously 454.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 456 cards now, previously 460.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 443 cards now, previously 447.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 121 cards now, previously 125.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 415 cards now, previously 419.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 169 cards now, previously 173.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 270 cards now, previously 274.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 301 cards now, previously 305.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 256 cards now, previously 260.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 213 cards now, previously 217.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 489 cards now, previously 493.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 358 cards now, previously 362.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 392 cards now, previously 396.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 143 cards now, previously 147.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 251 cards now, previously 255.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 449 cards now, previously 453.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 210 cards now, previously 214.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 147 cards now, previously 151.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 467 cards now, previously 471.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 205 cards now, previously 209.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 4 cards now, previously 8.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 269 cards now, previously 273.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 33 cards now, previously 37.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 142 cards now, previously 146.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 308 cards now, previously 312.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 335 cards now, previously 339.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 289 cards now, previously 293.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 393 cards now, previously 397.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 321 cards now, previously 325.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 183 cards now, previously 187.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 107 cards now, previously 111.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 281 cards now, previously 285.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 424 cards now, previously 428.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 188 cards now, previously 192.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 52 cards now, previously 56.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 282 cards now, previously 286.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 211 cards now, previously 215.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 28 cards now, previously 32.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 367 cards now, previously 371.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 195 cards now, previously 199.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 137 cards now, previously 141.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 457 cards now, previously 461.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 313 cards now, previously 317.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 201 cards now, previously 205.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 57 cards now, previously 61.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 397 cards now, previously 401.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 364 cards now, previously 368.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 310 cards now, previously 314.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 61 cards now, previously 65.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 218 cards now, previously 222.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 434 cards now, previously 438.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 190 cards now, previously 194.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 382 cards now, previously 386.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 56 cards now, previously 60.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 378 cards now, previously 382.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 418 cards now, previously 422.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 203 cards now, previously 207.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 338 cards now, previously 342.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 232 cards now, previously 236.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 369 cards now, previously 373.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 266 cards now, previously 270.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 445 cards now, previously 449.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 386 cards now, previously 390.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 439 cards now, previously 443.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 469 cards now, previously 473.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 234 cards now, previously 238.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 257 cards now, previously 261.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 163 cards now, previously 167.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 476 cards now, previously 480.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 194 cards now, previously 198.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 361 cards now, previously 365.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 263 cards now, previously 267.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 419 cards now, previously 423.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 79 cards now, previously 83.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 225 cards now, previously 229.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 447 cards now, previously 451.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 453 cards now, previously 457.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 263 cards now, previously 267.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 336 cards now, previously 340.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 359 cards now, previously 363.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 125 cards now, previously 129.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 123 cards now, previously 127.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 388 cards now, previously 392.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 25 cards now, previously 29.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 29 cards now, previously 33.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 134 cards now, previously 138.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 229 cards now, previously 233.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 216 cards now, previously 220.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 478 cards now, previously 482.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 13 cards now, previously 17.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 251 cards now, previously 255.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 11 cards now, previously 15.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 61 cards now, previously 65.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 315 cards now, previously 319.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 245 cards now, previously 249.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 204 cards now, previously 208.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 248 cards now, previously 252.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 432 cards now, previously 436.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 432 cards now, previously 436.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 293 cards now, previously 297.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 486 cards now, previously 490.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 251 cards now, previously 255.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 149 cards now, previously 153.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 417 cards now, previously 421.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 228 cards now, previously 232.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 279 cards now, previously 283.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 277 cards now, previously 281.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 92 cards now, previously 96.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 155 cards now, previously 159.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 265 cards now, previously 269.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 417 cards now, previously 421.
Fail. Two cards should be grain in total. The player has 4 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 0.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 455 cards now, previously 459.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 220 cards now, previously 224.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 152 cards now, previously 156.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 422 cards now, previously 426.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 473 cards now, previously 477.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 6 cards now, previously 10.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 341 cards now, previously 345.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 239 cards now, previously 243.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:19.18% of 417
Taken at least once:16.31% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44595 returned 100% blocks executed 83%
    44595:    8:int compare(const void* a, const void* b) {
    44595:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    44595:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11892:   12:    return -1;
    32703:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      352:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      648:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      323:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      325:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      352:   89:      state->supplyCount[estate] = 8;
      352:   90:      state->supplyCount[duchy] = 8;
      352:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      648:   95:      state->supplyCount[estate] = 12;
      648:   96:      state->supplyCount[duchy] = 12;
      648:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
      704:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1296:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3973:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2973:  140:      state->deckCount[i] = 0;
    11892:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8919:  143:	  state->deck[i][j] = estate;
     8919:  144:	  state->deckCount[i]++;
        -:  145:	}
    23784:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20811:  148:	  state->deck[i][j] = copper;
    20811:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3973:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2973:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3973:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2973:  166:      state->handCount[i] = 0;
     2973:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3006 returned 100% blocks executed 100%
     3006:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3006:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3006:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       33:  210:    return -1;
     2973:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35676:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29730:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    29730:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29730:  217:    newDeckPos++;
   103730:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    74000:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29730:  221:    state->deckCount[player]--;
        -:  222:  }
    32703:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29730:  224:    state->deck[player][i] = newDeck[i];
    29730:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2973:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 9000 returned 100% blocks executed 85%
     9000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     9000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       33:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       33:  538:    state->deckCount[player] = state->discardCount[player];
       33:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       33:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       33:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       33:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       33:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       33:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       33:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8967:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8967:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8967:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8967:  576:    state->deckCount[player]--;
     8967:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8967:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 1000 returned 100% blocks executed 100%
     1000:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
     5000:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  734:     {
     4000:  735:		 drawCard(currentPlayer, state);		 
call    0 returned 100%
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
     1000:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 1000 returned 100% blocks executed 78%
     1000: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
     1000: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
     1000: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
     1000: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
     1000: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
     1000: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
     1000: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
     1000: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
     1000: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
     1000: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function VillageEffect() ----------

Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Fail! Card number should be the same. The player has 4 cards on hand now, previously 5.
Fail! One card should be drawn. The player's deck has 0 cards now, previously 0.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:18.71% of 417
Taken at least once:15.83% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44790 returned 100% blocks executed 83%
    44790:    8:int compare(const void* a, const void* b) {
    44790:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    44790:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11944:   12:    return -1;
    32846:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
      339:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      661:   77:  else if (numPlayers == 3)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   78:    {
      336:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      325:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
      339:   89:      state->supplyCount[estate] = 8;
      339:   90:      state->supplyCount[duchy] = 8;
      339:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      661:   95:      state->supplyCount[estate] = 12;
      661:   96:      state->supplyCount[duchy] = 12;
      661:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      678:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1322:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3986:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2986:  140:      state->deckCount[i] = 0;
    11944:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8958:  143:	  state->deck[i][j] = estate;
     8958:  144:	  state->deckCount[i]++;
        -:  145:	}
    23888:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20902:  148:	  state->deck[i][j] = copper;
    20902:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3986:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2986:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3986:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2986:  166:      state->handCount[i] = 0;
     2986:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2989 returned 100% blocks executed 100%
     2989:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2989:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2989:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3:  210:    return -1;
     2986:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35832:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29860:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    29860:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29860:  217:    newDeckPos++;
   104185:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    74325:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29860:  221:    state->deckCount[player]--;
        -:  222:  }
    32846:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29860:  224:    state->deck[player][i] = newDeck[i];
    29860:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2986:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6000 returned 100% blocks executed 85%
     6000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        3:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5997:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5997:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5997:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5997:  576:    state->deckCount[player]--;
     5997:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5997:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 1000 returned 100% blocks executed 100%
     1000:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
     1000:  745:     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  746:
        -:  747:     //+2 Actions
     1000:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
     1000:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 1000 returned 100% blocks executed 78%
     1000: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
     1000: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
     1000: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
     1000: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
     1000: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
     1000: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
     1000: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
     1000: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
     1000: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
     1000: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function AdventurerEffect() ----------

Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 9 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 3 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 13 discarded cards but 14 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 0 less cards drawn should be discarded. There are 4 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:20.14% of 417
Taken at least once:17.51% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44895 returned 100% blocks executed 83%
    44895:    8:int compare(const void* a, const void* b) {
    44895:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    44895:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    11972:   12:    return -1;
    32923:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
      333:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      667:   77:  else if (numPlayers == 3)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   78:    {
      341:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      326:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
      333:   89:      state->supplyCount[estate] = 8;
      333:   90:      state->supplyCount[duchy] = 8;
      333:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      667:   95:      state->supplyCount[estate] = 12;
      667:   96:      state->supplyCount[duchy] = 12;
      667:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      666:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1334:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3993:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2993:  140:      state->deckCount[i] = 0;
    11972:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8979:  143:	  state->deck[i][j] = estate;
     8979:  144:	  state->deckCount[i]++;
        -:  145:	}
    23944:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    20951:  148:	  state->deck[i][j] = copper;
    20951:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3993:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2993:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3993:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2993:  166:      state->handCount[i] = 0;
     2993:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3019 returned 100% blocks executed 100%
     3019:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3019:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3019:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       26:  210:    return -1;
     2993:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35916:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29930:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    29930:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29930:  217:    newDeckPos++;
   104429:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    74499:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29930:  221:    state->deckCount[player]--;
        -:  222:  }
    32923:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    29930:  224:    state->deck[player][i] = newDeck[i];
    29930:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2993:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 8989 returned 100% blocks executed 85%
     8989:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     8989:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       13:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       13:  538:    state->deckCount[player] = state->discardCount[player];
       13:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       13:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       13:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       13:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       13:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       13:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8976:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8976:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8976:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8976:  576:    state->deckCount[player]--;
     8976:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8976:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 1000 returned 100% blocks executed 100%
     1000:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
     1000:  648:     int z = 0;
     5989:  649:     while (drawntreasure < 2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     3989:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       13:  651:               shuffle(currentPlayer, state);
call    0 returned 100%
        -:  652:          }
     3989:  653:          drawCard(currentPlayer, state);
call    0 returned 100%
     3989:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
     3989:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2000:  656:               drawntreasure++;
        -:  657:          else {
     1989:  658:               temphand[z] = cardDrawn;
     1989:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1989:  660:               z++;
        -:  661:          }
        -:  662:     }
     4989:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     2989:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
     2989:  665:          z = z - 1;
        -:  666:     }
     1000:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
