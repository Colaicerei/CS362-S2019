----------------Random Test: Function SmithyEffect()----------------

Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 295 cards now, previously 299.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 289 cards now, previously 293.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 189 cards now, previously 193.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 209 cards now, previously 213.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 433 cards now, previously 437.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 466 cards now, previously 470.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 268 cards now, previously 272.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 480 cards now, previously 484.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 208 cards now, previously 212.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 213 cards now, previously 217.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 141 cards now, previously 145.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 332 cards now, previously 336.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 38 cards now, previously 42.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 186 cards now, previously 190.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 191 cards now, previously 195.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 482 cards now, previously 486.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 328 cards now, previously 332.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 460 cards now, previously 464.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 365 cards now, previously 369.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 76 cards now, previously 80.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 448 cards now, previously 452.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 488 cards now, previously 492.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 406 cards now, previously 410.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 267 cards now, previously 271.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 366 cards now, previously 370.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 76 cards now, previously 80.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 76 cards now, previously 80.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 78 cards now, previously 82.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 446 cards now, previously 450.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 184 cards now, previously 188.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 292 cards now, previously 296.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 428 cards now, previously 432.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 315 cards now, previously 319.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 172 cards now, previously 176.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 249 cards now, previously 253.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 404 cards now, previously 408.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 395 cards now, previously 399.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 290 cards now, previously 294.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 184 cards now, previously 188.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 302 cards now, previously 306.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 492 cards now, previously 496.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 48 cards now, previously 52.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 305 cards now, previously 309.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 280 cards now, previously 284.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 117 cards now, previously 121.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 130 cards now, previously 134.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 365 cards now, previously 369.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 192 cards now, previously 196.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 341 cards now, previously 345.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 220 cards now, previously 224.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 322 cards now, previously 326.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 380 cards now, previously 384.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 154 cards now, previously 158.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 342 cards now, previously 346.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 166 cards now, previously 170.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 349 cards now, previously 353.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 312 cards now, previously 316.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 425 cards now, previously 429.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 371 cards now, previously 375.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 421 cards now, previously 425.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 315 cards now, previously 319.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 128 cards now, previously 132.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 278 cards now, previously 282.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 81 cards now, previously 85.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 126 cards now, previously 130.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 230 cards now, previously 234.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 484 cards now, previously 488.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 73 cards now, previously 77.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 39 cards now, previously 43.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 136 cards now, previously 140.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 178 cards now, previously 182.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 383 cards now, previously 387.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 467 cards now, previously 471.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 118 cards now, previously 122.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 179 cards now, previously 183.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 178 cards now, previously 182.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 431 cards now, previously 435.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 442 cards now, previously 446.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 128 cards now, previously 132.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 370 cards now, previously 374.
Fail. Two cards should be grain in total. The player has 6 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 0 cards now, previously 2.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 114 cards now, previously 118.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 74 cards now, previously 78.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 459 cards now, previously 463.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 97 cards now, previously 101.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 331 cards now, previously 335.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 372 cards now, previously 376.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 40 cards now, previously 44.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 235 cards now, previously 239.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 485 cards now, previously 489.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 122 cards now, previously 126.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 89 cards now, previously 93.
Fail. Two cards should be grain in total. The player has 8 cards on hand now, previously 5.
Fail. Three cards should be drawn. The player's deck has 490 cards now, previously 494.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:4.48% of 201
Branches executed:13.94% of 165
Taken at least once:1.21% of 165
Calls executed:3.64% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:24.16% of 563
Branches executed:24.70% of 417
Taken at least once:16.79% of 417
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4650 returned 100% blocks executed 83%
     4650:    8:int compare(const void* a, const void* b) {
     4650:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4650:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1240:   12:    return -1;
     3410:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 100 returned 100% blocks executed 95%
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
call    0 returned 100%
      100:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      100:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1100:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      100:   73:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   74:    {
       31:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       69:   77:  else if (numPlayers == 3)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:   78:    {
       28:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       41:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      100:   87:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   88:    {
       31:   89:      state->supplyCount[estate] = 8;
       31:   90:      state->supplyCount[duchy] = 8;
       31:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       69:   95:      state->supplyCount[estate] = 12;
       69:   96:      state->supplyCount[duchy] = 12;
       69:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      100:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      100:  102:  state->supplyCount[silver] = 40;
      100:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    16500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    15500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      400:  115:		  if (numPlayers == 2){ 
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
       62:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      138:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      800:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    14500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      410:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
      310:  140:      state->deckCount[i] = 0;
     1240:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      930:  143:	  state->deck[i][j] = estate;
      930:  144:	  state->deckCount[i]++;
        -:  145:	}
     2480:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     2170:  148:	  state->deck[i][j] = copper;
     2170:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      410:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
      310:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      410:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      310:  166:      state->handCount[i] = 0;
      310:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2700:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      100:  182:  state->outpostPlayed = 0;
      100:  183:  state->phase = 0;
      100:  184:  state->numActions = 1;
      100:  185:  state->numBuys = 1;
      100:  186:  state->playedCardCount = 0;
      100:  187:  state->whoseTurn = 0;
      100:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      100:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      100:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 313 returned 100% blocks executed 100%
      313:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      313:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      313:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3:  210:    return -1;
      310:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3720:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3100:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3100:  217:    newDeckPos++;
    10809:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     7709:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3100:  221:    state->deckCount[player]--;
        -:  222:  }
     3410:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3100:  224:    state->deck[player][i] = newDeck[i];
     3100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      310:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 100 returned 100% blocks executed 100%
      100:  346:int whoseTurn(struct gameState *state) {
      100:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 900 returned 100% blocks executed 85%
      900:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      900:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        3:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      897:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      897:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      897:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      897:  576:    state->deckCount[player]--;
      897:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      897:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 100 returned 100% blocks executed 100%
      100:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
      500:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  734:     {
      400:  735:		 drawCard(currentPlayer, state);		 
call    0 returned 100%
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
      100:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      100:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 100 returned 100% blocks executed 3%
      100:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
      100:  762:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      100:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
      100:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
      100:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
      100:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
      100:  775:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
      100:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 returned 100%
      100:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 100 returned 100% blocks executed 78%
      100: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
      100: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
      100: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
      100: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
      100: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
      100: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
      100: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
      100: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
      100: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
      100: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 100 returned 100% blocks executed 82%
      100: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
      100: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      600: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
      500: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
      400: 1343:	  state->coins += 1;
        -: 1344:	}
      100: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
      100: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
      100: 1356:  state->coins += bonus;
        -: 1357:
      100: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function VillageEffect() ----------

Test Passed! Results are As Expected!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:20.43% of 563
Branches executed:17.75% of 417
Taken at least once:14.87% of 417
Calls executed:9.47% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4650 returned 100% blocks executed 83%
     4650:    8:int compare(const void* a, const void* b) {
     4650:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4650:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1240:   12:    return -1;
     3410:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 100 returned 100% blocks executed 95%
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
call    0 returned 100%
      100:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      100:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1100:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      100:   73:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   74:    {
       31:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       69:   77:  else if (numPlayers == 3)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:   78:    {
       28:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       41:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      100:   87:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   88:    {
       31:   89:      state->supplyCount[estate] = 8;
       31:   90:      state->supplyCount[duchy] = 8;
       31:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       69:   95:      state->supplyCount[estate] = 12;
       69:   96:      state->supplyCount[duchy] = 12;
       69:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      100:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      100:  102:  state->supplyCount[silver] = 40;
      100:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    16500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    15500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      400:  115:		  if (numPlayers == 2){ 
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
       62:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      138:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      800:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    14500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      410:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
      310:  140:      state->deckCount[i] = 0;
     1240:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      930:  143:	  state->deck[i][j] = estate;
      930:  144:	  state->deckCount[i]++;
        -:  145:	}
     2480:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     2170:  148:	  state->deck[i][j] = copper;
     2170:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      410:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
      310:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      410:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      310:  166:      state->handCount[i] = 0;
      310:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2700:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      100:  182:  state->outpostPlayed = 0;
      100:  183:  state->phase = 0;
      100:  184:  state->numActions = 1;
      100:  185:  state->numBuys = 1;
      100:  186:  state->playedCardCount = 0;
      100:  187:  state->whoseTurn = 0;
      100:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      100:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      100:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 310 returned 100% blocks executed 94%
      310:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      310:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      310:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      310:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3720:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3100:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3100:  217:    newDeckPos++;
    10809:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     7709:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3100:  221:    state->deckCount[player]--;
        -:  222:  }
     3410:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3100:  224:    state->deck[player][i] = newDeck[i];
     3100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      310:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 600 returned 100% blocks executed 38%
      600:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      600:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      600:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      600:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      600:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      600:  576:    state->deckCount[player]--;
      600:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      600:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
    #####:  648:     int z = 0;
    #####:  649:     while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  651:               shuffle(currentPlayer, state);
call    0 never executed
        -:  652:          }
    #####:  653:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  656:               drawntreasure++;
        -:  657:          else {
    #####:  658:               temphand[z] = cardDrawn;
    #####:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:               z++;
        -:  661:          }
        -:  662:     }
    #####:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 never executed
branch  1 never executed
    #####:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  665:          z = z - 1;
        -:  666:     }
    #####:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 100 returned 100% blocks executed 100%
      100:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
      100:  745:     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  746:
        -:  747:     //+2 Actions
      100:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
      100:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      100:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 100 returned 100% blocks executed 78%
      100: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
      100: 1260:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        -: 1262:      //add card to played pile
      100: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
      100: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
      100: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
      100: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
      100: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
      100: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
      100: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
      100: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 100 returned 100% blocks executed 82%
      100: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
      100: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      600: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
      500: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
      400: 1343:	  state->coins += 1;
        -: 1344:	}
      100: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
      100: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
      100: 1356:  state->coins += bonus;
        -: 1357:
      100: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:

---------- Random Test: Function AdventurerEffect() ----------

Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 13 discarded cards but 14 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 0 less cards drawn should be discarded. There are 3 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 14 discarded cards but 15 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 0 less cards drawn should be discarded. There are 1 discarded cards but 0 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 1 less cards drawn should be discarded. There are 1 discarded cards but 1 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 10 discarded cards but 11 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 15 discarded cards but 16 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 12 discarded cards but 13 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 23 discarded cards but 24 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 2 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 9 discarded cards but 10 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 11 discarded cards but 12 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 1 less cards drawn should be discarded. There are 7 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 7 discarded cards but 8 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 8 discarded cards but 9 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 4 discarded cards but 5 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 2 discarded cards but 3 drawns.
Fail! 2 less cards drawn should be discarded. There are 1 discarded cards but 2 drawns.
Fail! 2 less cards drawn should be discarded. There are 6 discarded cards but 7 drawns.
Fail! 2 less cards drawn should be discarded. There are 5 discarded cards but 6 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Fail! 2 less cards drawn should be discarded. There are 3 discarded cards but 4 drawns.
Test Failed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 201
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
Calls executed:0.00% of 55

Function 'villageEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'councilRoomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:22.20% of 563
Branches executed:20.14% of 417
Taken at least once:17.51% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 45855 returned 100% blocks executed 83%
    45855:    8:int compare(const void* a, const void* b) {
    45855:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    45855:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    12228:   12:    return -1;
    33627:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   74:    {
      312:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      688:   77:  else if (numPlayers == 3)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:   78:    {
      319:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      369:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   88:    {
      312:   89:      state->supplyCount[estate] = 8;
      312:   90:      state->supplyCount[duchy] = 8;
      312:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      688:   95:      state->supplyCount[estate] = 12;
      688:   96:      state->supplyCount[duchy] = 12;
      688:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      624:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1376:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4057:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     3057:  140:      state->deckCount[i] = 0;
    12228:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     9171:  143:	  state->deck[i][j] = estate;
     9171:  144:	  state->deckCount[i]++;
        -:  145:	}
    24456:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    21399:  148:	  state->deck[i][j] = copper;
    21399:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4057:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     3057:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4057:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3057:  166:      state->handCount[i] = 0;
     3057:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3083 returned 100% blocks executed 100%
     3083:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3083:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3083:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       26:  210:    return -1;
     3057:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    36684:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    30570:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    30570:  216:    newDeck[newDeckPos] = state->deck[player][card];
    30570:  217:    newDeckPos++;
   106626:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    76056:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    30570:  221:    state->deckCount[player]--;
        -:  222:  }
    33627:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    30570:  224:    state->deck[player][i] = newDeck[i];
    30570:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3057:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 8989 returned 100% blocks executed 85%
     8989:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     8989:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       13:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       13:  538:    state->deckCount[player] = state->discardCount[player];
       13:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       13:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       13:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       13:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       13:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       13:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8976:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8976:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8976:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8976:  576:    state->deckCount[player]--;
     8976:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8976:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 1000 returned 100% blocks executed 100%
     1000:  646:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[]) {
        -:  647:     int cardDrawn;
     1000:  648:     int z = 0;
     5989:  649:     while (drawntreasure < 2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     3989:  650:          if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       13:  651:               shuffle(currentPlayer, state);
call    0 returned 100%
        -:  652:          }
     3989:  653:          drawCard(currentPlayer, state);
call    0 returned 100%
     3989:  654:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
     3989:  655:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2000:  656:               drawntreasure++;
        -:  657:          else {
     1989:  658:               temphand[z] = cardDrawn;
     1989:  659:               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1989:  660:               z++;
        -:  661:          }
        -:  662:     }
     4989:  663:     while (z >= 0) { //****introduced bug for assignment-2 to change z - 1 >= 0 to z >= 0****
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     2989:  664:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
     2989:  665:          z = z - 1;
        -:  666:     }
     1000:  667:     return 0;
        -:  668:}
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  669:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:     //+4 Cards
    #####:  671:     for (int i = 0; i < 4; i++)   
branch  0 never executed
branch  1 never executed
        -:  672:     {
    #####:  673:          drawCard(currentPlayer, state);
call    0 never executed
        -:  674:		 
        -:  675:     }
        -:  676:
        -:  677:     //+1 Buy
    #####:  678:     state->numBuys++;
        -:  679:
        -:  680:     //Each other player draws a card
    #####:  681:     for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:     {
    #####:  683:          if (i == currentPlayer) //****introduced bug for assignment-2, change != to ==****
branch  0 never executed
branch  1 never executed
        -:  684:          {    
    #####:  685:               drawCard(i, state);
call    0 never executed
        -:  686:          }
        -:  687:     }
        -:  688:
        -:  689:     //put played card in played card pile
    #####:  690:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  691:
    #####:  692:     return 0;
        -:  693:}
        -:  694:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  695:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  696:     int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:     {
    #####:  700:          return -1;
        -:  701:     }
        -:  702:
    #####:  703:     if (choice2 > treasure_map && choice2 < curse)  //****instruduced bug for assignment-2, change logic from or to and****
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:     {
    #####:  705:          return -1;
        -:  706:     }
        -:  707:
    #####:  708:     if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:     {
    #####:  710:          return -1;
        -:  711:     }
        -:  712:
    #####:  713:     gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:     //discard card from hand
    #####:  716:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:     //discard trashed card
    #####:  719:     for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:     {
    #####:  721:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:          {
    #####:  723:               discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  724:               break;
        -:  725:          }
        -:  726:     }
        -:  727:
    #####:  728:     return 0;
        -:  729:}
        -:  730:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  731:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  732:     //+3 Cards
    #####:  733:     for (int i = 0; i <= 3; i++)  //****introduced bug for assignment-2, loop one more round****
branch  0 never executed
branch  1 never executed
        -:  734:     {
    #####:  735:		 drawCard(currentPlayer, state);		 
call    0 never executed
        -:  736:     }
        -:  737:
        -:  738:     //discard card from hand
    #####:  739:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:	 return 0;
        -:  741:}
        -:  742:
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  743:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  744:     //+1 Card
    #####:  745:     drawCard(currentPlayer, state);
call    0 never executed
        -:  746:
        -:  747:     //+2 Actions
    #####:  748:     state->numActions = state->numActions + 2;
        -:  749:
        -:  750:     //discard played card from hand
    #####:  751:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  752:     return 0;
        -:  753:}
        -:  754:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
    #####:  762:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
    #####:  767:  int drawntreasure=0;
        -:  768:  //int cardDrawn;
        -:  769:  //int z = 0;// this is the counter for the temp hand
    #####:  770:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:         adventurerEffect(drawntreasure, currentPlayer, state, temphand);
call    0 never executed
    #####:  779:		 return 0;
        -:  780:      			
        -:  781:    case council_room:         
    #####:  782:         councilRoomEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  783:		 return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:         mineEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  843:		 return 0;
        -:  844:
        -:  845:      
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:         smithyEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  875:		 return 0;
        -:  876:      
        -:  877:		
        -:  878:    case village:
    #####:  879:         villageEffect(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:		 return 0;
        -:  881:      
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1000: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     6000: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
     5000: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
     4000: 1343:	  state->coins += 1;
        -: 1344:	}
     1000: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     1000: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1000: 1356:  state->coins += bonus;
        -: 1357:
     1000: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
